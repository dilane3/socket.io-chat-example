<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat | Room</title>

    <style>
        body {
            width: 100;
            height: 100vh;
            margin: 0;
            background-color: #3e4bff;
            font-family: ubuntu, Arial, Helvetica, sans-serif;
            font-weight: 900;
        }

        #messages {
            width: 500px;
            height: calc(100vh - 200px);
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #f4f4f4;
            box-shadow: 0 2px 5px rgba(0, 0, 0, .4);
        }

        div.message-container {
            position: relative;
            width: 100%;
            height: 100%;
        }

        header {
            height: 40px;
            width: calc(100% - 20px);
            background-color: #3e4bff;
            color: #fff;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding-left: 20px;
        }

        .users-typying {
            position: absolute;
            bottom: 70px;
            left: 50%;
            transform: translateX(-50%);
            height: 20px;
            max-width: 300px;
            min-width: 40px;
            width: auto;
            /* background-color: rgb(223, 222, 222); */
            background-color: #fff;
            color: #3e4bff;
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            align-items: center;
            padding: 10px;
            z-index: 105;
            box-shadow: 0 .5px 3px #aaa;
            border-radius: 5px;
            opacity: .8;
            font-size: 12px;
        }

        .hidden {
            display: none;
        }

        .online-users-number {
            margin-right: 10px;
        }

        .section-message,
        .image-viewer {
            width: 100%;
            height: calc(100% - 100px);
        }

        .section-message {
            overflow-y: scroll;
            overflow-x: hidden;
            scrollbar-width: thin;
            scrollbar-color: green;
        }

        .image-viewer {
            position: absolute;
            top: 40px;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #eee;
            overflow: hidden;
            z-index: 100;
            display: none;
            flex-direction: row;
            justify-content: center;
        }

        .image-viewer img {
            width: 300px;
            height: 100%;
            object-fit: cover;
        }

        .image-viewer i {
            font-size: 2rem;
            color: black;
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #fff;
            width: 40px;
            height: 40px;
            border-radius: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        article.message {
            width: all;
            height: auto;
            padding: 5px;
            display: flex;
            flex-direction: column;
            margin-bottom: 5px;
        }

        .message-item {
            display: flex;
            flex-direction: column;
            position: relative;
            max-width: 300px;
            min-width: 70px;
            min-height: 20px;
            height: auto;
            width: fit-content;
            background-color: #3b84f1;
            color:#fff;
            margin-left: 30px;
            padding: 2px;
            border-radius: 10px 10px 10px 0;
            z-index: 5;
            font-size: 13px;
        }

        .message-item span {
            padding: 10px;
        }

        .message-image {
            width: calc(300px - 2px);
            height: 300px;
            /* border: 1px solid #eee; */
            border-radius: 7px;
            overflow: hidden;
        }

        .message-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .message-info {
            display: flex;
            justify-content: flex-start;
            align-items: baseline;
            width: auto;
            margin-top: 5px;
            margin-left: 30px;
        }

        .message-info.sended {
            margin-left: auto;
            margin-right: 30px;
        }

        .message-info span:first-child {
            font-size: 14px;
        }

        .message-info span:last-child {
            font-size: 11px;
            color:rgba(27, 26, 26, 0.4);
            margin-left: 10px;
        }

        .message-item.sended {
            border-radius: 10px 10px 0 10px;
            background-color: #fff;
            color:rgba(0, 0, 0, .8);
            box-shadow: 0 1px 2px rgba(0, 0, 0, .4);
            margin-left: auto;
            margin-right: 30px;
        }

        .message-item::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: -15px;
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 0px solid transparent;
            border-bottom: 10px solid #3b84f1;
        }

        .message-item.sended::after {
            bottom: 0;
            left: inherit;
            right: -13px;
            border-left: 0px solid transparent;
            border-right: 15px solid transparent;
            border-bottom: 10px solid #fff;
            filter: drop-shadow(2px 1px 1px rgba(0, 0, 0, .4));
        }

        .editor {
            width: calc(100% - 40px);
            height: calc(60px - 40px);
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
        }

        .editor .btn-send {
            width: 80px;
            height: 35px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            border: 0;
            color: #fff;
            background-color: #3e4bff;
        }

        .editor input {
            width: calc(100% - 160px);
            height: 30px;
            padding: 2px 10px;
            border-radius: 5px;
            border: 1px solid #aaa;
        }

        .editor input:focus {
            outline: none;
        }

        .editor i {
            width: 40px;
            height: 40px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #aaa;
            font-size: 2rem;
            margin-right: 10px;
        }

        @media screen and (max-width: 500px) {
            #messages {
                width: 100%;
                height: 100vh;
                position: relative;    
            }

            .editor {
                position: absolute;
                bottom: 0;
                left: 0;
                right: 0;
            }

            .message-image {
                width: calc(300px - 2px);
                height: 300px;
                border: 1px solid #eee;
                border-radius: 7px;
                overflow: hidden;
            }
            
        }

        @media screen and (max-width: 400px) {
            .image-viewer img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .message-item {
                max-width: 80%;
            }

            .message-image {
                width: calc(100% - 2px);
                height: 300px;
                border: 1px solid #eee;
                border-radius: 7px;
                overflow: hidden;
            }
        }

        @media screen and (max-height: 500px) {
            #messages {
                height: 100vh;
                /* position: relative;     */
            }
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.7.1/font/bootstrap-icons.min.css">
</head>
<body>
    <section id="messages">
        <input type="hidden" value=<%= name %> id="name">
        <input type="hidden" value=<%= room %> id="room">
        <input type="hidden" value=<%= color %> id="color">
        <input type="hidden" id="image-support" value="false">
        <input type="file" accept="image/*" hidden>

        <div class="message-container">
            <header>
                <span>
                    <%= name %>
                </span>
    
                <span class="online-users-number"></span>
            </header>
    
            <div class="users-typying hidden"></div>
    
            <div class="section-message">
                <!-- <article class="message">
                    <div class="message-item sended">
                        <div class="message-image">
                            <img src="http://localhost:5000/images/1637918029010--1.png">
                        </div>
                        <span>
                            Hello les amis, je suis un gars de la rue et je ne veux pas manger
                        </span>
                    </div>
                </article> -->
            </div>
            <div class="image-viewer hidden">
                <i class="bi bi-x image-viewer-close"></i>
                <img src="" class="image-preview">
            </div>
    
            <div class="editor">
                <i class="bi bi-image icon-image"></i>
                <input type="text" class="message" placeholder="Type a message">
                <button class="btn-send">Send</button>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();

        const instance = axios.create({
            baseURL: "http://chat-room-server-app.herokuapp.com"
        })

        const playAudio = async () => {
            const audio = new Audio("https://chat-room-server-app.herokuapp.com/sound/message.mp3")
            audio.play()
        }

        // selection of elements
        const messages = document.querySelector(".section-message")
        const textField = document.querySelector("input.message")
        const sendBtn = document.querySelector(".btn-send")
        const usersTyping = document.querySelector(".users-typying")
        const imageField = document.querySelector("input[type=file]")
        const iconImage = document.querySelector(".icon-image")
        const imageViewer = document.querySelector(".image-viewer")
        const iconImageViewerClose = document.querySelector(".image-viewer-close")
        const imagePreviewer = document.querySelector(".image-preview")

        const name = document.getElementById("name")
        const room = document.getElementById("room")
        const color = document.getElementById("color")
        const imageSupport = document.getElementById("image-support")

        // display number users online
        const numberUsersOnline = (number) => {
            if (number > 1) 
                return `${number} Users online`
            else
                return `${number} User online`
        }

        // join the room
        socket.emit("join", {name: name.value, room: room.value.toLowerCase(), color: color.value}, (onlineUsers) => {
            document.querySelector(".online-users-number").innerText = numberUsersOnline(onlineUsers)
        })

        const handleImagePreview = (file) => {
            if (file) {
                imagePreviewer.src = URL.createObjectURL(file)
            }
        }

        const formatDate = (date) => {
            const hours = date.getHours()
            const minutes = date.getMinutes()

            let hoursString = hours < 10 ? `0${hours}`:`${hours}`
            let minutesString = minutes < 10 ? `0${minutes}`:`${minutes}`

            return {hours: hoursString, minutes: minutesString}
        }

        const displayMessage = ({message, image, name, color}, status) => {
            const nodeMessage = document.createElement("article")
            const nodeMessageInner = document.createElement("div")
            const nodeMessageInnerText = document.createElement("span")

            // message info
            const messageInfo = document.createElement("div")
            const messageAuthor = document.createElement("span")
            const messageDate = document.createElement("span")

            const {hours, minutes} = formatDate(new Date())

            messageInfo.classList.add("message-info")
            
            messageAuthor.innerText = name
            messageDate.innerText = hours + ':' + minutes

            // setting some classes
            nodeMessage.classList.add("message")
            nodeMessageInner.classList.add("message-item")

            if (status === "sended") {
                nodeMessageInner.classList.add("sended") // set the sended class
                messageInfo.classList.add("sended")
            }

            // adding image to a message
            if (image) {
                const nodeImage = document.createElement("img")
                const nodeImageContainer = document.createElement("div")

                nodeImageContainer.classList.add("message-image")
                nodeImage.src = image

                nodeImageContainer.appendChild(nodeImage)

                nodeMessageInner.appendChild(nodeImageContainer)
            }

            // adding text
            if (message) {
                nodeMessageInnerText.innerText = message
                nodeMessageInner.appendChild(nodeMessageInnerText)
            }
            
            nodeMessage.appendChild(nodeMessageInner)

            // adding info message
            if (status === "received") {
                messageAuthor.style.color = color
                messageInfo.appendChild(messageAuthor)
            }

            messageInfo.appendChild(messageDate)
            nodeMessage.appendChild(messageInfo)

            messages.appendChild(nodeMessage)

            messages.scrollTo({
                top: messages.scrollHeight,
                left: 0,
                behavior: 'smooth'
            })
        }

        const sendMessage = (event) => {
            event.preventDefault()

            const message = textField.value

            const n = name.value
            const c = color.value
            const r = room.value.toLowerCase()

            if (message && message.length > 0) {

                if (imageField.files.length > 0) {
                    const formData = new FormData()

                    formData.append("image", imageField.files[0])

                    instance.post("/api/message", formData)
                    .then(res => {
                        const imageUrl = "http://chat-room-server-app.herokuapp.com/images/" + res.data.filename

                        displayMessage({message, image: imageUrl, name: n, color: c}, "sended")
                        socket.emit("chat message", {message, image: imageUrl, name: n, color: c, room: r})
                    })
                    .catch(err => {
                        console.log(err)
                    })
                    .then(() => {
                        imageViewer.style.display = 'none'
                        imageField.value = ""
                    })
                } else {
                    displayMessage({message, name: n, color: c}, "sended")
                    socket.emit("chat message", {message, name: n, color: c, room: r})
                }

                socket.emit("user is typing", {room: room.value.toLowerCase(), val: false})

                textField.value = ""
            } 
            else {
                if (imageField.files.length > 0) {
                    const formData = new FormData()

                    formData.append("image", imageField.files[0])

                    instance.post("/api/message", formData)
                    .then(res => {
                        const imageUrl = "http://chat-room-server-app.herokuapp.com/images/" + res.data.filename

                        displayMessage({image: imageUrl, name: n, color: c}, "sended")
                        socket.emit("chat message", {image: imageUrl, name: n, color: c, room: r})
                    })
                    .catch(err => {
                        console.log(err)
                    })
                    .then(() => {
                        imageViewer.style.display = 'none'
                        imageField.value = ""
                    })
                }
            }
        }

        iconImageViewerClose.onclick = () => {
            imageViewer.style.display = 'none'

            imageField.value = ""
            console.log("donne")
        }

        imageField.onchange = function() {
            imageViewer.style.display = 'flex'

            handleImagePreview(this.files[0])
        }

        iconImage.onclick = function(event) {
            imageField.click()
        }

        sendBtn.onclick = sendMessage

        textField.onkeyup = (event) => {
            if (event.key === "Enter")
                sendMessage(event)
        }

        // user is typying
        textField.addEventListener("keyup", function(event){
            // event.preventDefault()

            const msg = textField.value

            if (msg.length > 0) {
                console.log(msg)
                socket.emit("user is typing", {room: room.value.toLowerCase(), val: true})
            } else {
                socket.emit("user is typing", {room: room.value.toLowerCase(), val: false})
            }
        })

        // receive a message
        socket.on("message", ({message, image, name, color}) => {
            playAudio()

            displayMessage({message, image, name, color}, "received")
        })

        // get all users online
        socket.on("online users", (onlineUsers) => {
            document.querySelector(".online-users-number").innerText = numberUsersOnline(onlineUsers)
        })

        // get all users typying
        socket.on("users typing", (users) => {
            if (users.length > 0) {
                const index = users.findIndex(user => user.id === socket.id)

                if (index > -1)
                    users.splice(index, 1)

                const number = users.length

                const names = users.map(user => user.name)
                console.log(names)

                const namesString = [...names].splice(0, 3).join(" ").toLowerCase()

                if (number === 0) {
                    usersTyping.classList.remove("hidden")
                }
                if (number === 1) {
                    usersTyping.innerText = `${namesString} is typing`
                }
                else if (number > 1 && number <= 3) {
                    usersTyping.innerText = `${namesString} are typing`
                }
                else {
                    usersTyping.innerText = `${namesString} and ${[...names].splice(3).length} others are typing`
                }
            
                usersTyping.classList.remove("hidden")    
            } else {
                usersTyping.classList.add("hidden")
            }
        })
    </script>
</body>
</html>