<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        body {
            width: 100;
            height: 100vh;
            margin: 0;
            background-color: #3e4bff;
            font-family: ubuntu, Arial, Helvetica, sans-serif;
            font-weight: 900;
        }

        #messages {
            width: 500px;
            height: calc(100vh - 200px);
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #f4f4f4;
            box-shadow: 0 2px 5px rgba(0, 0, 0, .4);
        }

        header {
            height: 40px;
            width: calc(100% - 20px);
            background-color: #3e4bff;
            color: #fff;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding-left: 20px;
        }

        .online-users-number {
            margin-right: 10px;
        }

        .section-message {
            width: 100%;
            height: calc(100% - 100px);
            overflow-y: scroll;
            overflow-x: hidden;
            scrollbar-width: thin;
            scrollbar-color: green;
        }
        
        .message {
            width: all;
            height: auto;
            padding: 5px;
            display: flex;
            flex-direction: column;
            margin-bottom: 5px;
        }

        .message-item {
            display: flex;
            position: relative;
            /* max-width: 300px; */
            min-width: 70px;
            min-height: 20px;
            height: auto;
            width: fit-content;
            background-color: #3b84f1;
            color:#fff;
            margin-left: 30px;
            padding: 10px;
            border-radius: 10px 10px 10px 0;
            z-index: 5;
            font-size: 13px;
        }

        .message-info {
            display: flex;
            justify-content: flex-start;
            align-items: baseline;
            width: auto;
            margin-top: 5px;
            margin-left: 30px;
        }

        .message-info.sended {
            margin-left: auto;
            margin-right: 30px;
        }

        .message-info span:first-child {
            font-size: 14px;
        }

        .message-info span:last-child {
            font-size: 11px;
            color:rgba(27, 26, 26, 0.4);
            margin-left: 10px;
        }

        .message-item.sended {
            border-radius: 10px 10px 0 10px;
            background-color: #fff;
            color:rgba(0, 0, 0, .8);
            box-shadow: 0 1px 2px rgba(0, 0, 0, .4);
            margin-left: auto;
            margin-right: 30px;
        }

        .message-item::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: -15px;
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 0px solid transparent;
            border-bottom: 10px solid #3b84f1;
        }

        .message-item.sended::after {
            bottom: 0;
            left: inherit;
            right: -13px;
            border-left: 0px solid transparent;
            border-right: 15px solid transparent;
            border-bottom: 10px solid #fff;
            filter: drop-shadow(2px 1px 1px rgba(0, 0, 0, .4));
        }

        .editor {
            width: calc(100% - 40px);
            height: calc(60px - 40px);
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
        }

        .editor .btn-send {
            width: 80px;
            height: 35px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 5px;
            border: 0;
            color: #fff;
            background-color: #3e4bff;
        }

        .editor input {
            width: calc(100% - 110px);
            height: 30px;
            padding: 2px 10px;
            border-radius: 5px;
            border: 1px solid #aaa;
        }

        .editor input:focus {
            outline: none;
        }

        @media screen and (max-width: 500px) {
            #messages {
                width: 100%;
                height: 100vh;
                position: relative;    
            }
        }

        @media screen and (max-height: 500px) {
            #messages {
                height: 100vh;
                /* position: relative;     */
            }
        }
    </style>
</head>
<body>
    <section id="messages">
        <input type="hidden" value=<%= name %> id="name">
        <input type="hidden" value=<%= room %> id="room">
        <input type="hidden" value=<%= color %> id="color">
        <header>
            <span>
                <%= name %>
            </span>

            <span class="online-users-number"></span>
        </header>

        <div class="section-message">
        </div>

        <div class="editor">
            <input type="text" class="message" placeholder="Type a message">
            <button class="btn-send">Send</button>
        </div>
    </section>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();

        const audio = new Audio("https://chat-room-server-app.herokuapp.com/sound/message.mp3")

        // selection of elements
        const messages = document.querySelector(".section-message")
        const textField = document.querySelector(".message")
        const sendBtn = document.querySelector(".btn-send")

        const name = document.getElementById("name")
        const room = document.getElementById("room")
        const color = document.getElementById("color")

        // display number users online
        const numberUsersOnline = (number) => {
            if (number > 1) 
                return `${number} Users online`
            else
                return `${number} User online`
        }

        // join the room
        socket.emit("join", {name: name.value, room: room.value, color: color.value}, (onlineUsers) => {
            document.querySelector(".online-users-number").innerText = numberUsersOnline(onlineUsers)
        })

        const displayMessage = ({message, name, color}, status) => {
            const nodeMessage = document.createElement("article")
            const nodeMessageInner = document.createElement("div")

            // message info
            const messageInfo = document.createElement("div")
            const messageAuthor = document.createElement("span")
            const messageDate = document.createElement("span")

            const date = new Date()

            messageInfo.classList.add("message-info")
            
            messageAuthor.innerText = name
            messageDate.innerText = date.getHours() + ':' + date.getMinutes()

            // setting some classes
            nodeMessage.classList.add("message")
            nodeMessageInner.classList.add("message-item")

            if (status === "sended") {
                nodeMessageInner.classList.add("sended") // set the sended class
                messageInfo.classList.add("sended")
            }

            nodeMessageInner.innerText = message

            nodeMessage.appendChild(nodeMessageInner)

            // adding info message
            if (status === "received") {
                messageAuthor.style.color = color
                messageInfo.appendChild(messageAuthor)
            }

            messageInfo.appendChild(messageDate)
            nodeMessage.appendChild(messageInfo)

            messages.appendChild(nodeMessage)

            messages.scrollTo({
                top: messages.scrollHeight,
                left: 0,
                behavior: 'smooth'
            })
        }

        const sendMessage = (event) => {
            event.preventDefault()

            const message = textField.value

            if (message && message.length > 0) {
                const n = name.value
                const c = color.value
                const r = room.value

                displayMessage({message, name: n, color: c}, "sended")

                socket.emit("chat message", {message, name: n, color: c, room: r})

                textField.value = ""
            }
        }

        sendBtn.onclick = sendMessage
        textField.onkeyup = (event) => {
            if (event.key === "Enter")
                sendMessage(event)
        }

        socket.on("message", ({message, name, color}) => {
            audio.play()
            displayMessage({message, name, color}, "received")
        })

        socket.on("online users", (onlineUsers) => {
            document.querySelector(".online-users-number").innerText = numberUsersOnline(onlineUsers)
        })
    </script>
</body>
</html>